---
import Cart from "../icons/cart.astro";
---

<header
  id="landing-header"
  class="py-6 px-10 flex items-center fixed top-0 w-full justify-between text-black z-40"
>
  <div class="flex flex-1">
    <h1 class="text-black">hola</h1>
  </div>
  <nav>
    <ul
      class="flex text-sm [&>li>a]:text-current [&>li>a]:transition-colors [&>li>a]:duration-500 [&>li>a]:inline-block [&>li>a]:px-4 [&>li>a]:py-2"
    >
      <li><a href="">Model S</a></li>
      <li><a href="">Model 3</a></li>
      <li><a href="">Model x</a></li>
      <li><a href="">Model y</a></li>
      <li><a href="">powercal</a></li>
      <li><a href="">carga</a></li>
    </ul>
  </nav>
  <nav class="flex flex-1 justify-end cursor-pointer">
    <Cart />
  </nav>

  <div
    id="menu-backdrop"
    class="absolute left-0 top-0 bg-amber-200 text-black backdrop-blur-lg rounded
        translate-x-[var(--left)] translate-y-[var(--top)]
        w-[var(--width)] h-[var(--height)]
        transition-all duration-300
        ease-in-out opacity-0 -z-10"
  >
  </div>
</header>

<script>
  const listItem = document.querySelectorAll("#landing-header li");
  const menuBackDrop = document.querySelector("#menu-backdrop") as HTMLElement;

  listItem.forEach((item) => {
    item.addEventListener("mouseenter", () => {
      const { left, top, width, height } = item.getBoundingClientRect();
      menuBackDrop?.style.setProperty("--left", `${left}px`);
      menuBackDrop?.style.setProperty("--top", `${top}px`);
      menuBackDrop?.style.setProperty("--width", `${width}px`);
      menuBackDrop?.style.setProperty("--height", `${height}px`);
      menuBackDrop.style.opacity = "1";
      menuBackDrop.style.visibility = "visible";
    });

    item.addEventListener("mouseleave", () => {
      menuBackDrop.style.opacity = "0";
      menuBackDrop.style.visibility = "hidden";
    });
  });
</script>

<script>
  const $header = document.querySelector("#landing-header") as HTMLElement;

  const observerOptions = {
    root: null,
    rootMargin: "0px", // en cuanto se ven
    threshold: 0.5, // porcentaje de visibilidad
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      const { isIntersecting } = entry;

      if (isIntersecting) {
        const color = entry.target.getAttribute("data-header-color");

        if (color) {
          $header.style.color = color;
        }
      }
    });
  }, observerOptions);

  const $sections = document.querySelectorAll(".landing-section");

  $sections.forEach((section) => observer.observe(section));
</script>
